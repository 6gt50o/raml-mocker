#!/usr/bin/env node

const fs = require('fs');
const Ajv = require('ajv');
const path = require('path');
const axios = require('axios');
const chalk = require('chalk');
const raml = require('raml-1-parser');

const readRaml = require('../src/read_raml');
const { jsonPath } = require('../src/util');

const config = JSON.parse(fs.readFileSync('./.raml-config.json', 'utf8'));
config.raml = path.resolve(config.raml);
config.controller = path.resolve(config.controller);
if (Array.isArray(config.plugins)) {
  config.plugins = config.plugins.map(plugin => path.resolve(plugin));
}

const apiJSON = raml.loadApiSync(path.join(config.raml, config.main), {
  serializeMetadata: false
});

axios.defaults.baseURL = 'http://localhost:3001';

const webApiArr = readRaml.getWebApiArr(apiJSON);
const definitionSchema = readRaml.getDefinitionSchama(apiJSON);

webApiArr.forEach(webApi => {
  webApi.responses.forEach(async resp => {
    let requestBody = {};
    if (webApi.body) {
      requestBody = webApi.body.value;
    }
    const response = await axios(webApi.absoluteUri, {
      method: webApi.method,
      data: requestBody,
      params: webApi.queryParameter
    });
    if (!resp.schema) return;
    const ajv = new Ajv();

    const validate = ajv.addSchema(definitionSchema).compile(resp.schema);
    const valid = validate(response.data);
    let color = 'green';
    let icon = '✔';

    let validInfo = '';

    if (!valid) {
      color = 'red';
      icon = '✖';
      const [error] = validate.errors;
      const { message, dataPath } = error;
      let result = response.data;
      if (dataPath) {
        result = jsonPath(response.data, dataPath);
      }
      validInfo = chalk[color](`
${message}
info:
${JSON.stringify(result, null, '\t')}
\n`);
    }
    console.log(
      chalk`{${color} ${icon} 请求：} {underline ${
        webApi.absoluteUri
      }}  \n ${validInfo}`
    );
  });
});
