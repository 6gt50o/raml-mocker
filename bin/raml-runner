#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const axios = require('axios');
const raml = require('raml-1-parser');

const readRaml = require('../src/read_raml');
const { validate, output } = require('../src/validate');
const { jsonPath, replaceUriParmaters } = require('../src/util');

const config = JSON.parse(fs.readFileSync('./.raml-config.json', 'utf8'));
config.raml = path.resolve(config.raml);
config.controller = path.resolve(config.controller);
if (Array.isArray(config.plugins)) {
  config.plugins = config.plugins.map(plugin => path.resolve(plugin));
}

const env = process.env.NODE_ENV;
let host = `http://localhost:${config.port}`;
if (config.runner && env) {
  host = config.runner[env];
}

console.log(`HOST: ${host}`);
axios.defaults.baseURL = host;

const apiJSON = raml.loadApiSync(path.join(config.raml, config.main), {
  serializeMetadata: false
});
const webApiArr = readRaml.getWebApiArr(apiJSON);
const definitionSchema = readRaml.getDefinitionSchama(apiJSON);

const getResponseByStatusCode = (code, responses) => {
  let response;
  responses.forEach(resp => {
    if (resp.code === code) {
      response = resp;
    }
  });
  return response;
};

webApiArr.forEach(async webApi => {
  let requestPath = webApi.absoluteUri;
  try {
    if (webApi.uriParameters) {
      replaceUriParmaters(requestPath, (match, expression) => {
        requestPath = requestPath.replace(
          match,
          webApi.uriParameters[expression]
        );
      });
    }

    const response = await axios(requestPath, {
      method: webApi.method,
      data: webApi.body ? webApi.body.value : {},
      params: webApi.queryParameter
    });

    const resp = getResponseByStatusCode(response.status, webApi.responses);
    if (!resp) {
      output(false, "can't find code by responses", '', requestPath);
    }

    if (!resp.schema) return;
    const { data, request } = response;
    const { valid, error } = validate(definitionSchema, resp.schema, data);
    let validInfo = '';
    let msg = '';
    if (!valid) {
      let result = data;
      const { message, dataPath } = error;
      msg = message;
      if (dataPath) {
        result = jsonPath(data, dataPath);
      }
      validInfo = `info:\n${JSON.stringify(result, null, '\t')}\n`;
    }
    requestPath = request.path;
    output(valid, msg, validInfo, requestPath);
  } catch (err) {
    output(false, err.message, '', requestPath);
  }
});
