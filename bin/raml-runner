#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const axios = require('axios');
const raml = require('raml-1-parser');

const readRaml = require('../src/read_raml');
const { validate, output } = require('../src/validate');
const { jsonPath, replaceUriParmaters } = require('../src/util');

const config = JSON.parse(fs.readFileSync('./.raml-config.json', 'utf8'));
config.raml = path.resolve(config.raml);
config.controller = path.resolve(config.controller);
if (Array.isArray(config.plugins)) {
  config.plugins = config.plugins.map(plugin => path.resolve(plugin));
}

const apiJSON = raml.loadApiSync(path.join(config.raml, config.main), {
  serializeMetadata: false
});

axios.defaults.baseURL = 'http://localhost:3001';

const webApiArr = readRaml.getWebApiArr(apiJSON);
const definitionSchema = readRaml.getDefinitionSchama(apiJSON);

webApiArr.forEach(webApi => {
  webApi.responses.forEach(async resp => {
    let requestBody = {};
    if (webApi.body) {
      requestBody = webApi.body.value;
    }
    let requestPath = '';
    try {
      let uri = webApi.absoluteUri;
      if (webApi.uriParameters) {
        replaceUriParmaters(uri, (match, expression) => {
          uri = uri.replace(match, webApi.uriParameters[expression]);
        });
      }
      const response = await axios(uri, {
        method: webApi.method,
        data: requestBody,
        params: webApi.queryParameter
      });
      if (!resp.schema) return;
      const { data, request } = response;
      const { valid, error } = validate(definitionSchema, resp.schema, data);
      let validInfo = '';
      let msg = '';
      if (!valid) {
        let result = data;
        const { message, dataPath } = error;
        msg = message;
        if (dataPath) {
          result = jsonPath(data, dataPath);
        }
        validInfo = `info:\n${JSON.stringify(result, null, '\t')}\n`;
      }
      requestPath = request.path;
      output(valid, msg, validInfo, requestPath);
    } catch (err) {
      output(false, err.message, '', requestPath);
    }
  });
});
