#%RAML 1.0
---
title: hello demo API
baseUri: /api/:version
baseUriParameters:
  host:
    description: 这个host 不一定啊
    enum: ['baidu1.com', 'baidu2.com']
version: v1

mediaType: application/json

# resourceTypes:
#   collection:
#     description: Collection of available <<resourcePathName>> in Jukebox
#     get:
#       description: Get a list of <<resourcePathName>> based on the song title.
#       responses:
#         200:
#           body:
#             application/json:
#     post:
#       description: |
#         Add a new <<resourcePathName|!singularize>> to Jukebox.
#       queryParameters:
#         access_token:
#           description: "The access token provided by the authentication application"
#           example: AABBCCDD
#           required: true
#           type: string
#       body:
#         application/json:
#           type: <<resourcePathName|!singularize>>
#       responses:
#         200:
#           body:
#             application/json:
#               example: |
#                 { "message": "The <<resourcePathName|!singularize>> has been properly entered" }

#   collection-item:
#     description: Entity representing a <<resourcePathName|!singularize>>
#     get:
#         description: |
#             Get the <<resourcePathName|!singularize>>
#             with <<resourcePathName|!singularize>>Id =
#             {<<resourcePathName|!singularize>>Id}
#         responses:
#             200:
#                 body:
#                     application/json:
#             404:
#                 body:
#                     application/json:
#                         example: |
#                             {"message": "<<resourcePathName|!singularize>> not found" }
#     post:
#         description: |
#             hello <<resourcePathName|!singularize>>
#         body:
#             application/json:
#                 type: song
#         responses:
#             200:
#                 body:
#                     application/json:
#                         example: |
#                             { "message": "<<resourcePathName|!singularize>>"}


resourceTypes:
  collection:
    description: Collection of available <<resourcePathName>> in Jukebox
    get:
      description: Get a list of <<resourcePathName>> based on the song title.
      responses:
        200:
          body:
            application/json:
    post:
      description: |
        Add a new <<resourcePathName|!singularize>> to Jukebox.
      queryParameters:
        access_token:
          description: "The access token provided by the authentication application"
          example: AABBCCDD
          required: true
          type: string
      body:
        application/json:
          type: <<resourcePathName|!singularize>>
      responses:
        200:
          body:
            application/json:
              example: |
                { "message": "The <<resourcePathName|!singularize>> has been properly entered" }
  collection-item:
    description: Entity representing a <<resourcePathName|!singularize>>
    get:
      description: |
        Get the <<resourcePathName|!singularize>>
        with <<resourcePathName|!singularize>>Id =
        {<<resourcePathName|!singularize>>Id}
      responses:
        200:
          body:
            application/json:
        404:
          body:
            application/json:
              example: |
                {"message": "<<resourcePathName|!singularize>> not found" }

types: !include ./types.raml

# header 描述信息
traits:
  chargeable:
    headers:
      X-Auth-Token:
        type: array
        description: |
          A department code to be charged.
          Multiple of such headers are allowed.
        pattern: ^\d+\-\w+$
        example: 230-OCTO
  traceable:
    headers:
      X-Tracker:
        description: A code to track API calls end to end
        pattern: ^\w{16}$
        example: abcdefghijklmnop


/users:
    /books:
        get:
            is: [ chargeable, traceable ]
            description: 这是描述
            (controller): user#getBook
            responses:
                200:
                  body:
                    type: song[]
                    example: !include ./user-books.json
                400:
                    body:
                      example: |
                      {
                        "data": "请登录吧！！"
                      }
        /:id:
            get:
                is: [ chargeable ]
                queryParameters:
                    id:
                        type: number
                        required: false
                        description: 用户id
                        enum: ['131', '289', '257', '75']
                    token:
                        type: number
                        type: string
                        minLength: 10
                        example: 0321736079?
                        description: 用户登录必须传递token
                responses:
                  200:
                    body:
                      application/json:
                        type: song[]
                        example: !include ./user-books.json
            post:
                body:
                  application/json:
                    type: abc
                responses:
                  200:
                    body:
                      application/json:
                        type: song
                        example: !include ./user-books.json
# /abc:
#   type:
#     collection:
#       exampleCollection: |
#         {
#           "songId": "550e8400-e29b-41d4-a716-446655440000",
#           "songTitle": "Get Lucky",
#           "duration": "6:07",
#           "artist": {
#             "artistId": "110e8300-e32b-41d4-a716-664400445500"
#             "artistName": "Daft Punk",
#             "imageURL": "http://travelhymns.com/wp-content/uploads/2013/06/random-access-memories1.jpg"
#           },
#           "album": {
#             "albumId": "183100e3-0e2b-4404-a716-66104d440550",
#             "albumName": "Random Access Memories",
#             "imageURL": "http://upload.wikimedia.org/wikipedia/en/a/a7/Random_Access_Memories.jpg"
#           }
#         }
#   /{id}:
#     type:
#       collection-item:
#         exampleItem: THIS IS THE EXAMPLE

# /def:
#   type:
#     collection:
#       exampleCollection: |
#         [
#           {
#             "songId": "550e8400-e29b-41d4-a716-446655440000",
#             "songTitle": "Get Lucky"
#           },
#           {
#             "songId": "550e8400-e29b-41d4-a716-446655440111",
#             "songTitle": "Loose yourself to dance"
#           },
#           {
#             "songId": "550e8400-e29b-41d4-a716-446655440222",
#             "songTitle": "Gio sorgio by Morodera"
#           }
#         ]
#       exampleItem: |
#         {
#           "songId": "550e8400-e29b-41d4-a716-446655440000",
#           "songTitle": "Get Lucky",
#           "albumId": "183100e3-0e2b-4404-a716-66104d440550"
#         }
#   get:
#     queryParameters:
#       songTitle:
#         description: "The title of the song to search (it is case insensitive and doesn't need to match the whole title)"
#         required: true
#         minLength: 3
#         type: string
#         example: "Get L"
#   /{songId}:
#     type:
#       collection-item:
#         exampleItem: |
#           {
#             "songId": "550e8400-e29b-41d4-a716-446655440000",
#             "songTitle": "Get Lucky",
#             "duration": "6:07",
#             "artist": {
#               "artistId": "110e8300-e32b-41d4-a716-664400445500"
#               "artistName": "Daft Punk",
#               "imageURL": "http://travelhymns.com/wp-content/uploads/2013/06/random-access-memories1.jpg"
#             },
#             "album": {
#               "albumId": "183100e3-0e2b-4404-a716-66104d440550",
#               "albumName": "Random Access Memories",
#               "imageURL": "http://upload.wikimedia.org/wikipedia/en/a/a7/Random_Access_Memories.jpg"
#             }
#           }
/song: !include ./song/song.raml
